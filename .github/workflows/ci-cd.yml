name: CI/CD Workflow

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt

    - name: Lint code
      run: flake8 .

    - name: Lint Dockerfile
      run: |
        curl -fsSL https://github.com/hadolint/hadolint/releases/download/v1.17.3/hadolint-Linux-x86_64 -o hadolint
        chmod +x hadolint
        ./hadolint Dockerfile

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image
      run: docker build -t ahmedgamalyousef/hivebox2:latest .

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: ahmedgamalyousef/hivebox2:latest
        options: --privileged
        ports:
          - 5000:5000
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    - name: Start Falsk App
      run: nohup python app.py &

    - name: wait for the server to start
      run: sleep 10 

    - name: Run integration tests
      run: |
        python -m pytest test_app.py

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Ensure Shell Availability
      run: |
        sudo apt-get update
        sudo apt-get install -y dash bash
        if [ ! -L /bin/sh ]; then sudo ln -sf /bin/dash /bin/sh; fi  # Force link sh to dash

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Verify Java Installation
      run: |
        ls -l /usr/lib/jvm/
        ls -l /usr/lib/jvm/temurin-17-jdk-amd64/bin/

    - name: Verify Java Version
      run: |
        /usr/lib/jvm/temurin-17-jdk-amd64/bin/java -version

    - name: Verify Java Version
      run: java -version
     
    - name: Install SonarScanner
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner.zip
        export SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-4.6.2.2472-linux
        echo "SONAR_SCANNER_HOME=$SONAR_SCANNER_HOME" >> $GITHUB_ENV
        echo "PATH=$SONAR_SCANNER_HOME/bin:\$PATH" >> $GITHUB_ENV
        source $GITHUB_ENV  # Apply the environment variable
        echo "SonarScanner home is set to: $SONAR_SCANNER_HOME"
        ls -l $SONAR_SCANNER_HOME/bin  # Verify the sonar-scanner directory
    
    # - name: Debug PATH
    #   run: |
    #       echo "Current PATH: $PATH"
    #       which sonar-scanner
    #       ls -l $SONAR_SCANNER_HOME/bin      
    
    # - name: Verify SonarScanner Installation
    #   run: |
    #       sonar-scanner --version  # Verify SonarScanner is correctly installed
    
    - name: Run SonarQube Scan
      shell: /bin/bash
      env:
        JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
        # SONAR_SCANNER_HOME: /home/runner/work/HiveBox-Scalable-RESTful-API-for-Beekeepers/HiveBox-Scalable-RESTful-API-for-Beekeepers/sonar-scanner-4.6.2.2472-linux
        PATH: $SONAR_SCANNER_HOME/bin:/usr/lib/jvm/temurin-17-jdk-amd64/bin:$PATH
      run: |
        sonar-scanner \
        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
        -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}        
  terrascan:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run Terrascan
      uses: accurics/terrascan-action@v1

  push_image:
    runs-on: ubuntu-latest
    needs: terrascan
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker image
      run: |
        docker build -t ahmedgamalyousef/hivebox2:latest .
        docker tag ahmedgamalyousef/hivebox2:latest ghcr.io/${{ github.repository }}/ahmedgamalyousef/hivebox2:latest
        docker push ghcr.io/${{ github.repository }}/ahmedgamalyousef/hivebox2:latest
